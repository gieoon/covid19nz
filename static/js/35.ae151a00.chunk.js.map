{"version":3,"sources":["components/Cell.js","components/DistrictRow.js","components/Row.js"],"names":["React","memo","statistic","data","isPerMillion","lastUpdatedTT","getTableStatistic","total","delta","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","className","hideDelta","div","classnames","title","interpolate","formatNumber","format","Math","abs","prevProps","currProps","equal","stateCode","districtName","regionHighlighted","setRegionHighlighted","expandTable","t","useTranslation","highlightDistrict","useCallback","produce","draftRegionHighlighted","tableStatistics","TABLE_STATISTICS_EXPANDED","TABLE_STATISTICS","onMouseEnter","meta","notes","Tooltip","size","map","key","useState","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","useHistory","rowElement","useRef","handleSortClick","draftSortData","sortingFunction","districtNameA","districtNameB","dataType","statisticA","districts","statisticB","localeCompare","highlightState","_setShowDistrict","districtNameStr","UNKNOWN_DISTRICT_KEY","CITY_NAMES","handleCollapse","current","scrollIntoView","block","Fragment","onClick","ref","TOPO2CITY_NAME","capitalize","formatLastUpdated","last_updated","state","bind","this","invert","HeaderCell","handleSort","Object","keys","sort","a","b"],"mappings":"2MA+DeA,MAAMC,MAvDR,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,cAAmB,EACxCC,YACrBH,EACAD,EACAE,EACAC,GAJKE,EADwD,EACxDA,MAAOC,EADiD,EACjDA,MAORC,EAASC,YAAU,CACvBH,MAAOA,EACPC,MAAOA,EACPG,OAAQC,MAGJC,EAAkBC,IAAkBZ,GAE1C,OACE,yBAAKa,UAAU,mBACXF,EAAgBG,WAChB,kBAAC,IAASC,IAAV,CACEF,UAAWG,IAAW,QAAD,aAAgBhB,IACrCiB,MAAOX,GAENC,EAAOD,MAAMY,aAAY,SAACZ,GAAD,OACxBA,EAAQ,EACJ,SAAWa,YAAab,EAAOK,EAAgBS,QAC/Cd,EAAQ,EACR,SAAWa,YAAaE,KAAKC,IAAIhB,GAAQK,EAAgBS,QACzD,OAKV,kBAAC,IAASL,IAAV,CAAcF,UAAU,QAAQI,MAAOZ,GACpCE,EAAOF,MAAMa,aAAY,SAACb,GAAD,OACxBc,YAAad,EAAOM,EAAgBS,OAAQpB,WAOlC,SAACuB,EAAWC,GAAe,IAAD,QAC5C,QAAKC,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBI,MAAjB,UAAwBmB,EAAUvB,YAAlC,aAAwB,EAAgBI,WAG7CoB,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBK,MAAjB,UAAwBkB,EAAUvB,YAAlC,aAAwB,EAAgBK,UAG7CmB,IAAMF,EAAUrB,aAAcsB,EAAUtB,kB,kCCQ/C,IA0BeJ,MAAMC,MA/ErB,YASI,IAAD,EARD2B,EAQC,EARDA,UACAC,EAOC,EAPDA,aACA1B,EAMC,EANDA,KACAC,EAKC,EALDA,aACA0B,EAIC,EAJDA,kBACAC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,YACA3B,EACC,EADDA,cAEO4B,EAAKC,cAALD,EAEDE,EAAoBC,uBAAY,WAChCN,EAAkBD,eAAiBA,GACrCE,EACEM,YAAQP,GAAmB,SAACQ,GAC1BA,EAAuBV,UAAYA,EACnCU,EAAuBT,aAAeA,QAI3C,CAACC,EAAmBD,EAAcE,EAAsBH,IAErDW,EAAkBP,EACpBQ,IACAC,IAEJ,OACE,yBACE1B,UAAWG,IAAW,MAAO,WAAY,CACvC,kBAAmC,OAAjBY,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBD,gBAAiBA,IAExDa,aAAcP,GAEd,yBAAKpB,UAAU,QACb,yBAAKA,UAAU,cAAckB,EAAEJ,KAC1B,OAAJ1B,QAAI,IAAJA,GAAA,UAAAA,EAAMwC,YAAN,eAAYC,QACX,kBAACC,EAAA,EAAY,CAAC1C,KAAMA,EAAKwC,KAAKC,OAC5B,kBAAC,IAAD,CAAUE,KAAM,OAKrBP,EAAgBQ,KAAI,SAAC7C,GAAD,OACnB,kBAAC,EAAD,eACE8C,IAAK9C,GACD,CAACA,YAAWC,OAAMC,eAAcC,0BAOnB,SAACoB,EAAWC,GAAe,IAAD,YACnD,QAAKC,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBI,MAAjB,UAAwBmB,EAAUvB,YAAlC,aAAwB,EAAgBI,WAEtCoB,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBK,MAAjB,UAAwBkB,EAAUvB,YAAlC,aAAwB,EAAgBK,WAGtDmB,IAAK,UAACF,EAAUtB,YAAX,aAAC,eAAD,UAAmCuB,EAAUvB,YAA7C,aAAmC,oBAG/BwB,IAAMF,EAAUrB,aAAcsB,EAAUtB,mBAGjDuB,IACCF,EAAUK,kBAAkBD,aAC5BH,EAAUI,kBAAkBD,gBAE7BF,IAAMF,EAAUK,kBAAkBD,aAAcJ,EAAUI,eACzDF,IAAMD,EAAUI,kBAAkBD,aAAcH,EAAUG,mBAGlDF,IAAMF,EAAUO,YAAaN,EAAUM,oB,yBCwPtChC,cAAMC,MA1SrB,YASI,IAAD,WARDE,EAQC,EARDA,KACAyB,EAOC,EAPDA,UACAC,EAMC,EANDA,aACAzB,EAKC,EALDA,aACA0B,EAIC,EAJDA,kBACAC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,YACA3B,EACC,EADDA,cACC,EACyC4C,oBAAS,GADlD,mBACMC,EADN,KACqBC,EADrB,OAE+BC,YAAkB,mBAAoB,CACpEC,WAAY,YACZC,aAAa,EACb9C,OAAO,IALR,mBAEM+C,EAFN,KAEgBC,EAFhB,KASMvB,GADSwB,cACJvB,cAALD,GAEDyB,EAAaC,mBAEbC,EAAkBxB,uBACtB,SAAClC,GACCsD,EACEnB,YAAQkB,GAAU,SAACM,GACjBA,EAAcP,aAAeC,EAASD,YACtCO,EAAcR,WAAanD,QAIjC,CAACqD,EAAUC,IAGPM,EAAkB1B,uBACtB,SAAC2B,EAAeC,GACd,GAA4B,iBAAxBT,EAASF,WAA+B,CAC1C,IAAMxC,EAAkBC,IAAkByC,EAASF,YAC7CY,EACJV,EAAS/C,QAAUK,EAAgBG,UAAY,QAAU,QAErDkD,EAAa5D,YACjBH,EAAKgE,UAAUJ,GACfR,EAASF,WACTjD,EACAC,GACA4D,GACIG,EAAa9D,YACjBH,EAAKgE,UAAUH,GACfT,EAASF,WACTjD,EACAC,GACA4D,GACF,OAAOV,EAASD,YACZY,EAAaE,EACbA,EAAaF,EAEjB,OAAOX,EAASD,YACZS,EAAcM,cAAcL,GAC5BA,EAAcK,cAAcN,KAGpC,CAACR,EAAUpD,EAAMC,EAAcC,IAG3BiE,EAAiBlC,uBAAY,WAC7BR,EACEE,EAAkBF,YAAcA,GAClCG,EACEM,YAAQP,GAAmB,SAACQ,GAC1BA,EAAuBV,UAAYA,EACnCU,EAAuBT,aAAe,SAInCA,IAEPC,EAAkBD,eAAiBA,GACnCC,EAAkBF,YAAczB,EAAKyB,WAErCG,EACEM,YAAQP,GAAmB,SAACQ,GAC1BA,EAAuBV,UAAYzB,EAAKyB,UACxCU,EAAuBT,aAAeA,SAK7C,CACD1B,EAAKyB,UACLC,EACAC,EACAC,EACAH,IAGI2C,EAAmBnC,uBAAY,WAC/BjC,EAAKgE,WACPhB,GAAkBD,KAEnB,CAACA,EAAe/C,IAEfqE,EAAkBvC,EAAEJ,GACpBA,IAAiB4C,MACnBD,EAAe,UAAMvC,EAAEwC,KAAR,aAAkCxC,EAC/CyC,IAAWvE,EAAKyB,YADH,MAYjB,IAAM+C,EAAiBvC,uBAAY,WACjCe,GAAiB,GACjBO,EAAWkB,QAAQC,eAAe,CAChCC,MAAO,YAKR,CAAClD,IAEEW,EAAkBP,EACpBQ,IACAC,IAEJ,OACE,kBAAC,IAAMsC,SAAP,KACE,yBACEhE,UAAWG,IACT,MACA,CAAC,WAA0B,OAAdU,GACb,CACE,iBACGA,IAA8B,OAAjBE,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBF,aAAcA,GAC9CC,IACkB,OAAjBC,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBD,gBAAiBA,IACnB,OAAjBC,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBF,aAAczB,EAAKyB,YAG9Cc,aAAc4B,EACdU,QAAST,EACTU,IAAKvB,GAEL,yBAAK3C,UAAU,QACb,yBAAKA,UAAU,uBACZkB,EAAEyC,IAAWQ,IAAetD,MAAgBK,EAAEyC,IAAW9C,KAAeK,EAAEuC,KAExE,OAAJrE,QAAI,IAAJA,GAAA,UAAAA,EAAMwC,YAAN,eAAYC,QACX,kBAACC,EAAA,EAAY,CAAC1C,KAAMA,EAAKwC,KAAKC,OAC5B,kBAAC,IAAD,CAAUE,KAAM,OAKrBP,EAAgBQ,KAAI,SAAC7C,GAAD,OACnB,kBAAC,EAAD,eACE8C,IAAK9C,GACD,CAACC,OAAMD,YAAWE,eAAcC,uBAKzC6C,GACC,kBAAC,IAAM6B,SAAP,KACE,yBAAKhE,UAAU,cACb,yBAAKA,UAAU,mBACR,OAAJZ,QAAI,IAAJA,GAAA,UAAAA,EAAMwC,YAAN,8BACC,uBAAG5B,UAAU,gBACX,kBAAC,IAAD,MACCoE,YAAW,GAAD,OACNC,YAAkBjF,EAAKwC,KAAK0C,cADtB,YACuCpD,EAAE,UAIxD,yBACElB,UAAU,cAGV,kBAAC,IAAD,MACA,8BACGkB,EAAE,gCAAiC,CAClCqD,MAAO1D,QAkBjB,yBAAKb,UAAWG,IAAW,MAAO,YAChC,yBACEH,UAAU,eACViE,QAASpB,EAAgB2B,KAAKC,KAAM,iBAEpC,yBAAKzE,UAAU,iBAAiBkB,EAAE,aACT,iBAAxBsB,EAASF,YACR,yBACEtC,UAAWG,IAAW,YAAa,CACjCuE,QAASlC,EAASD,eAGpB,kBAAC,IAAD,CAAYR,KAAM,OAKvBP,EAAgBQ,KAAI,SAAC7C,GAAD,OACnB,kBAACwF,EAAA,EAAD,eACE1C,IAAK9C,GACD,CAACA,YAAWqD,WAAUC,eAF5B,CAGEmC,WAAY/B,EAAgB2B,KAAK,EAAMrF,WAOhDgD,GACC0C,OAAOC,KAAK1F,EAAKgE,WACd2B,MAAK,SAACC,EAAGC,GAAJ,OAAUlC,EAAgBiC,EAAGC,MAClCjD,KAAI,SAAClB,GAAD,OACH,kBAAC,EAAD,eACE1B,KAAMA,EAAKgE,UAAUtC,GACrBmB,IAAKnB,GACD,CACFA,eACAC,oBACAC,uBACAH,YACAxB,eACA4B,cACA3B,sBAKT6C,GACC,yBAAKnC,UAAU,cACb,yBAAKA,UAAU,UACb,4CAAckB,EAAEyC,IAAW9C,IAA3B,iBACA,yBAAKb,UAAU,OAAOiE,QAASL,GAC7B,kBAAC,IAAD,aASE,SAAClD,EAAWC,GAAe,IAAD,QACxC,QAAKC,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBI,MAAjB,UAAwBmB,EAAUvB,YAAlC,aAAwB,EAAgBI,WAEtCoB,IAAK,UAACF,EAAUtB,YAAX,aAAC,EAAgBK,MAAjB,UAAwBkB,EAAUvB,YAAlC,aAAwB,EAAgBK,WAE7CmB,IAAMF,EAAUrB,aAAcsB,EAAUtB,mBAGhDuB,IACAF,EAAUK,kBAAkBF,UAC5BF,EAAUI,kBAAkBF,YAE5BD,IAAMF,EAAUK,kBAAkBF,UAAWH,EAAUG,YACzDD,IAAMD,EAAUI,kBAAkBF,UAAWF,EAAUE,iBAIrDD,IACAF,EAAUK,kBAAkBD,aAC5BH,EAAUI,kBAAkBD,eAE5BF,IACEF,EAAUK,kBAAkBD,aAC5BJ,EAAUI,eAEdF,IAAMD,EAAUI,kBAAkBD,aAAcH,EAAUG,kBAGhDF,IAAMF,EAAUO,YAAaN,EAAUM","file":"static/js/35.ae151a00.chunk.js","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber, getTableStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion, lastUpdatedTT}) => {\n  const {total, delta} = getTableStatistic(\n    data,\n    statistic,\n    isPerMillion,\n    lastUpdatedTT\n  );\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {!statisticConfig.hideDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED} from '../constants';\n\nimport {InfoIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell\n          key={statistic}\n          {...{statistic, data, isPerMillion, lastUpdatedTT}}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  CITY_NAMES,\n  STATISTIC_CONFIGS,\n  TABLE_STATISTICS,\n  TABLE_STATISTICS_EXPANDED,\n  UNKNOWN_DISTRICT_KEY,\n  TOPO2CITY_NAME,\n} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  getTableStatistic,\n} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  FilterIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  lastUpdatedTT,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticConfig = STATISTIC_CONFIGS[sortData.sortColumn];\n        const dataType =\n          sortData.delta && !statisticConfig.hideDelta ? 'delta' : 'total';\n\n        const statisticA = getTableStatistic(\n          data.districts[districtNameA],\n          sortData.sortColumn,\n          isPerMillion,\n          lastUpdatedTT\n        )[dataType];\n        const statisticB = getTableStatistic(\n          data.districts[districtNameB],\n          sortData.sortColumn,\n          isPerMillion,\n          lastUpdatedTT\n        )[dataType];\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, isPerMillion, lastUpdatedTT]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = t(districtName);\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      CITY_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  // const handleStatePageClick = useCallback(\n  //   (stateCode) => {\n  //     history.push(`state/${stateCode}`);\n  //   },\n  //   [history]\n  // );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n\n    // eslint-disable-next-line\n    const faux = stateCode;\n  }, [stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <React.Fragment>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(CITY_NAMES[TOPO2CITY_NAME[stateCode]]) || t(CITY_NAMES[stateCode]) || t(districtNameStr)}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell\n            key={statistic}\n            {...{data, statistic, isPerMillion, lastUpdatedTT}}\n          />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                // onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {/* {UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )} */}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts)\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                isPerMillion,\n                expandTable,\n                lastUpdatedTT,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\">\n          <div className=\"spacer\">\n            <p>{`End of ${t(CITY_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n"],"sourceRoot":""}
{"version":3,"sources":["utils/commonFunctions.js","constants.js","serviceWorker.js","i18n/index.js","index.js"],"names":["locale","numberFormatter","Intl","NumberFormat","maximumFractionDigits","isDevelopmentOrTest","getNZDate","utcToZonedTime","Date","getNZDateISO","formatISO","representation","getNZYesterdayISO","subDays","formatLastUpdated","unformattedDate","then","localePackage","LOCALE_SHORTHANDS","i18n","language","window","localStorage","i18nextLng","formatDistance","parseNZDate","isoDate","match","ISO_DATE_REGEX","NZ_ISO_SUFFIX","formatDate","formatString","date","format","formatNumber","value","option","statistic","NAN_STATISTICS","includes","NaN","isNaN","number","Math","abs","floor","capitalize","s","charAt","toUpperCase","slice","toTitleCase","str","replace","txt","substr","toLowerCase","getStatistic","data","type","count","perMillion","STATISTIC_OPTIONS","normalizeByKey","PER_MILLION_OPTIONS","key","normalizeBy","multiplyFactor","meta","population","tested","confirmed","deceased","recovered","other","normStatistic","currStatisticDelta","currStatistic","prevStatistic","normStatisticDelta","prevNormStatistic","isFinite","getTableStatistic","isPerMillion","lastUpdatedTT","expired","differenceInDays","TESTED_LOOKBACK_DAYS","total","delta","fetcher","url","fetch","response","json","API_ROOT_URL","english","hindi","telugu","kannada","gujarati","marathi","tamil","bengali","punjabi","malayalam","odiya","STATISTIC_DEFINITIONS","displayName","color","options","active","hideDelta","activeRatio","recoveryRatio","cfr","tpr","definitions","Object","keys","reduce","acc","config","configs","STATISTIC_CONFIGS","PRIMARY_STATISTICS","TABLE_STATISTICS","TABLE_STATISTICS_EXPANDED","TIMESERIES_STATISTICS","UPDATES_COUNT","DISTRICT_TABLE_COUNT","D3_TRANSITION_DURATION","MINIGRAPH_LOOKBACK_DAYS","UNASSIGNED_STATE_CODE","UNKNOWN_DISTRICT_KEY","SPRING_CONFIG_NUMBERS","clamp","precision","TIMESERIES_CHART_TYPES","TIMESERIES_LOOKBACKS","BEGINNING","THREE_MONTHS","MONTH","MAP_VIZS","CHOROPLETH","BUBBLES","MAP_VIEWS","COUNTRY","DISTRICTS","MAP_TYPES","STATE","MAP_META","UP","geoDataFile","mapType","WB","TT","LANGUAGE_IMGS","MAP_LEGEND_HEIGHT","CITY_NAMES","TOPO2CITY_NAME","cityCodes","cityCodesMap","map","index","push","code","name","CITY_CODES","CITY_CODES_ARRAY","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","use","Backend","LanguageDetector","initReactI18next","init","debug","keySeparator","returnEmptyString","fallbackLng","load","backend","loadPath","addPath","saveMissing","interpolation","escapeValue","App","lazy","rootElement","document","getElementById","main","render","fallback","requestIdleCallback","IntersectionObserver","src","done","js","createElement","onload","onerror","Error","head","appendChild","loadScript","URL","process","href","origin","addEventListener","setTimeout","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37cc7586.chunk.js","sourcesContent":["import {\n  NZ_ISO_SUFFIX,\n  ISO_DATE_REGEX,\n  LOCALE_SHORTHANDS,\n  NAN_STATISTICS,\n  PER_MILLION_OPTIONS,\n  STATISTIC_OPTIONS,\n  TESTED_LOOKBACK_DAYS,\n} from '../constants';\n\nimport {\n  differenceInDays,\n  format,\n  formatDistance,\n  formatISO,\n  subDays,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-nz', {\n  maximumFractionDigits: 1,\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getNZDate = () => {\n  return utcToZonedTime(new Date(), 'Pacific/Auckland');\n};\n\nexport const getNZDateISO = () => {\n  return formatISO(getNZDate(), {representation: 'date'});\n};\n\nexport const getNZYesterdayISO = () => {\n  return formatISO(subDays(getNZDate(), 1), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseNZDate = (isoDate) => {\n  if (!isoDate) return getNZDate();\n  if (isoDate.match(ISO_DATE_REGEX)) isoDate += NZ_ISO_SUFFIX;\n  return utcToZonedTime(new Date(isoDate), 'Pacific/Auckland');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  )\n    unformattedDate += NZ_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Pacific/Auckland');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport const abbreviateNumber = (number) => {\n  if (Math.abs(number) < 1e3) return numberFormatter.format(number);\n  else if (Math.abs(number) >= 1e3 && Math.abs(number) < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  // else if (Math.abs(number) >= 1e5 && Math.abs(number) < 1e7)\n  //   return numberFormatter.format(number / 1e5) + 'L';\n  // else if (Math.abs(number) >= 1e7 && Math.abs(number) < 1e10)\n  //   return numberFormatter.format(number / 1e7) + 'Cr';\n  // else if (Math.abs(number) >= 1e10 && Math.abs(number) < 1e14)\n  //   return numberFormatter.format(number / 1e10) + 'K Cr';\n  // else if (Math.abs(number) >= 1e14)\n  //   return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option, statistic) => {\n  if (statistic && value === 0 && NAN_STATISTICS.includes(statistic))\n    value = NaN;\n\n  if (isNaN(value)) return '-';\n  else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === 'int') {\n    value = Math.floor(value);\n  }\n  return numberFormatter.format(value) + (option === '%' ? '%' : '');\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (data, type, statistic, perMillion = false) => {\n  const {key, normalizeByKey: normalizeBy, multiplyFactor} = {\n    ...STATISTIC_OPTIONS[statistic],\n    ...(perMillion &&\n      !STATISTIC_OPTIONS[statistic]?.normalizeByKey &&\n      PER_MILLION_OPTIONS),\n  };\n  // console.log(\"data: \", data)\n\n  let count;\n  if (key === 'population') {\n    count = type === 'total' ? data?.meta?.population : 0;\n  } else if (key === 'tested') {\n    count = data?.[type]?.tested;\n  } else if (key === 'active') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const other = data?.[type]?.other || 0;\n    count = confirmed - deceased - recovered - other;\n  } else {\n    count = data?.[type]?.[key];\n  }\n\n  if (normalizeBy) {\n    if (type === 'total') {\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      count /= normStatistic;\n    } else {\n      const currStatisticDelta = count;\n      const currStatistic = getStatistic(data, 'total', key);\n      const prevStatistic = currStatistic - currStatisticDelta;\n\n      const normStatisticDelta = getStatistic(data, 'delta', {\n        key: normalizeBy,\n      });\n      const normStatistic = getStatistic(data, 'total', normalizeBy);\n      const prevNormStatistic = normStatistic - normStatisticDelta;\n\n      count = currStatistic / normStatistic - prevStatistic / prevNormStatistic;\n    }\n  }\n\n  return (multiplyFactor || 1) * ((isFinite(count) && count) || 0);\n};\n\nexport const getTableStatistic = (\n  data,\n  statistic,\n  isPerMillion,\n  lastUpdatedTT\n) => {\n  const expired =\n    (STATISTIC_OPTIONS[statistic].key === 'tested' ||\n      STATISTIC_OPTIONS[statistic].normalizeByKey === 'tested') &&\n    differenceInDays(\n      lastUpdatedTT,\n      parseNZDate(data.meta?.tested?.['last_updated'])\n    ) > TESTED_LOOKBACK_DAYS;\n\n  const total = !expired\n    ? getStatistic(data, 'total', statistic, isPerMillion)\n    : 0;\n  const delta = !expired\n    ? getStatistic(data, 'delta', statistic, isPerMillion)\n    : 0;\n  return {total, delta};\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n","export const API_ROOT_URL = \n  // 'https://api.covid19india.org/v4/min';\n  // 'http://api.covid19live.com/data/processed';\n  'https://gieoon.github.io/api.covid19nz/data/processed';\n\nexport const LOCALE_SHORTHANDS = {\n  english: 'en-US',\n  hindi: 'hi',\n  telugu: 'te',\n  kannada: 'en-US',\n  gujarati: 'gu',\n  marathi: 'en-US',\n  tamil: 'ta',\n  bengali: 'bn',\n  punjabi: 'en-US',\n  malayalam: 'en-US',\n  odiya: 'en-US',\n};\n\nexport const STATISTIC_DEFINITIONS = {\n  confirmed: {\n    displayName: 'confirmed',\n    color: '#ff073a',\n    format: 'int',\n    options: {key: 'confirmed'},\n  },\n  active: {\n    displayName: 'active',\n    color: '#007bff',\n    format: 'int',\n    options: {key: 'active'},\n    hideDelta: true,\n  },\n  recovered: {\n    displayName: 'recovered',\n    color: '#28a745',\n    format: 'int',\n    options: {key: 'recovered'},\n  },\n  deceased: {\n    displayName: 'deceased',\n    color: '#6c757d',\n    format: 'int',\n    options: {key: 'deceased'},\n  },\n  other: {\n    displayName: 'other',\n    format: 'int',\n    options: {key: 'other'},\n  },\n  tested: {\n    displayName: 'tested',\n    color: '#4b1eaa',\n    format: 'short',\n    options: {key: 'tested'},\n  },\n  activeRatio: {\n    displayName: 'active ratio',\n    format: '%',\n    options: {\n      key: 'active',\n      normalizeByKey: 'confirmed',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  recoveryRatio: {\n    displayName: 'recovery ratio',\n    format: '%',\n    options: {\n      key: 'recovered',\n      normalizeByKey: 'confirmed',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  cfr: {\n    displayName: 'case fatality ratio',\n    format: '%',\n    options: {\n      key: 'deceased',\n      normalizeByKey: 'confirmed',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  tpr: {\n    displayName: 'test positivity ratio',\n    color: '#fd7e14',\n    format: '%',\n    options: {\n      key: 'confirmed',\n      normalizeByKey: 'tested',\n      multiplyFactor: 100,\n    },\n    hideDelta: true,\n  },\n  population: {\n    displayName: 'population',\n    format: 'short',\n    options: {key: 'population'},\n    hideDelta: true,\n  },\n};\n\nconst definitions = Object.keys(STATISTIC_DEFINITIONS).reduce(\n  (acc, statistic) => {\n    const {options, ...config} = STATISTIC_DEFINITIONS[statistic];\n    acc.options[statistic] = options;\n    acc.configs[statistic] = config;\n    return acc;\n  },\n  {options: {}, configs: {}}\n);\n\nexport const STATISTIC_CONFIGS = definitions.configs;\nexport const STATISTIC_OPTIONS = definitions.options;\n\nexport const PER_MILLION_OPTIONS = {\n  normalizeByKey: 'population',\n  multiplyFactor: 1e6,\n};\n\nexport const NAN_STATISTICS = ['tested', 'tpr', 'population'];\n\nexport const PRIMARY_STATISTICS = [\n  'confirmed',\n  'active',\n  'recovered',\n  'deceased',\n];\n\nexport const TABLE_STATISTICS = [...PRIMARY_STATISTICS, 'tested'];\n\nexport const TABLE_STATISTICS_EXPANDED = Object.keys(STATISTIC_DEFINITIONS);\n\nexport const TIMESERIES_STATISTICS = [...PRIMARY_STATISTICS, 'tested'];\n\nexport const UPDATES_COUNT = 5;\n\nexport const DISTRICT_TABLE_COUNT = 30;\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MINIGRAPH_LOOKBACK_DAYS = 20;\n\nexport const TESTED_LOOKBACK_DAYS = 7;\n\nexport const UNASSIGNED_STATE_CODE = 'UN';\n\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\n\nexport const ISO_DATE_REGEX = /^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g;\n\nexport const NZ_ISO_SUFFIX = 'T00:00:00+12:00';\n\nexport const SPRING_CONFIG_NUMBERS = {clamp: true, precision: 1};\n\nexport const TIMESERIES_CHART_TYPES = {\n  total: 'Cumulative',\n  delta: 'Daily',\n};\n\nexport const TIMESERIES_LOOKBACKS = {\n  BEGINNING: 'Beginning',\n  THREE_MONTHS: '3 Months',\n  MONTH: '1 Month',\n};\n\nexport const MAP_VIZS = {\n  CHOROPLETH: 0,\n  BUBBLES: 1,\n};\n\nexport const MAP_VIEWS = {\n  COUNTRY: 0,\n  DISTRICTS: 1,\n};\n\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  STATE: 1,\n};\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === 'production' ? '/mini_maps' : '/projected_maps';\n\nexport const MAP_META = {\n  UP: {\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  WB: {\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  // TT: {\n  //   geoDataFile: `${MAPS_DIR}/india.json`,\n  //   mapType: MAP_TYPES.COUNTRY,\n  // },\n  // TT: {\n  //   geoDataFile: `${MAPS_DIR}/new-zealand-districts.json`,\n  //   mapType: MAP_TYPES.COUNTRY,\n  // },\n  // TT: {\n  //   geoDataFile: `${MAPS_DIR}/5.9-kx-small-district-health-board-2015.json`,\n  //   mapType: MAP_TYPES.COUNTRY,\n  // }\n  //https://mapshaper.org/\n  TT: {\n    geoDataFile: `${MAPS_DIR}/0.21-NZ_District_Health_Board_boundaries.json`,\n    mapType: MAP_TYPES.COUNTRY,\n  }\n  // TT: {\n  //   // This file is too big\n  //   geoDataFile: `${MAPS_DIR}/NZ_District_Health_Board_boundaries.json`,\n  //   mapType: MAP_TYPES.COUNTRY,\n  // },\n};\n\n// Language name to flag image file name\nexport const LANGUAGE_IMGS = {\n  \"english\": \"newzealand.jpg\",\n  \"japanese\": \"japan.svg\",\n  \"chinese\": \"china.jpg\",\n}\n\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const CITY_NAMES = {\n  'Auckland': \"Auckland\",\n  'Bay of Plenty': 'Bay of Plenty',\n  'Canterbury': 'Canterbury',\n  'Capital and Coast': 'Capital and Coast',\n  'Counties Manukau': 'Counties Manukau',\n  \"Hawke's Bay\": \"Hawke's Bay\",\n  'Hutt Valley': 'Hutt Valley',\n  'Lakes': 'Lakes',\n  'Midcentral': 'Midcentral',\n  'Nelson Marlborough': 'Nelson Marlborough',\n  'Northland': 'Northland',\n  'South Canterbury': 'South Canterbury',\n  'Southern': 'Southern',\n  'Tairawhiti': 'Tairawhiti',\n  'Taranaki': 'Taranaki',\n  'Waikato': 'Waikato',\n  'Wairarapa': 'Wairarapa',\n  'Waitemata': 'Waitemata',\n  'West Coast': 'West Coast',\n  'Whanganui': 'Whanganui',\n  'New Zealand': 'New Zealand'\n}\n\n// The district name stored in topojson\nexport const TOPO2CITY_NAME = {\n  \"NLD\": \"Northland\",\n  \"NWA\": \"Waitemata\",\n  \"CAK\": \"Auckland\",\n  \"SAK\": \"Counties Manukau\",\n  \"WKO\": \"Waikato\",\n  \"LKS\": \"Lakes\",\n  \"BOP\": \"Bay of Plenty\",\n  \"TRW\": \"Tairawhiti\",\n  \"TKI\": \"Taranaki\",\n  \"HWB\": \"Hawke's Bay\",\n  \"WNI\": \"Whanganui\",\n  \"MWU\": \"Midcentral\",\n  \"HUT\": \"Hutt Valley\",\n  \"CAP\": \"Capital and Coast\",\n  \"WRP\": \"Wairarapa\",\n  \"NLM\": \"Nelson Marlborough\",\n  \"WCO\": \"West Coast\",\n  \"CTY\": \"Canterbury\",\n  \"SCY\": \"South Canterbury\",\n  \"SRN\": \"Southern\",\n  \"TT\": \"New Zealand\"\n}\n\n/*\nexport const CITY_NAMES = {\n  Auckland: \"Auckland\",\n  Franklin: \"Franklin\",\n  Manukau: \"Manukau\",\n  Hamilton: \"Hamilton\",\n  Hauraki: \"Hauraki\",\n  \"Matamata-Piako\": \"Matamata-Piako\",\n  Otorohanga: \"Otorohanga\",\n  Rotorua: \"Rotorua\",\n  \"South Waikato\": \"South Waikato\",\n  Taupo: \"Taupo\",\n  \"Thames-Coromandel\": \"Thames-Coromandel\",\n  Rodney: \"Rodney\",\n  Waitakere: \"Waitakere\",\n  Opotiki: \"Opotiki\",\n  Rotorua: \"Rotorua\",\n  Taupo: \"Taupo\",\n  \"Western Bay of Plenty\": \"Western Bay of Plenty\",\n  Whakatane: \"Whakatane\",\n  Ashburton: \"Ashburton\",\n  Christchurch: \"Christchurch\",\n  Hurunui: \"Hurunui\",\n  Kaikoura: \"Kaikoura\",\n  Mackenzie: \"Mackenzie\",\n  Selwyn: \"Selwyn\",\n  Timaru: \"Timaru\",\n  Waimakariri: \"Waimakariri\",\n  Waimate: \"Waimate\",\n  Waitaki: \"Waitaki\",\n  Gisborne: \"Gisborne\",\n  \"Central Hawke's Bay\": \"Central Hawke's Bay\",\n  Hastings: \"Hastings\",\n  \"Hastings city\": \"Hastings city\",\n  Napier: \"Napier\",\n  Wairoa: \"Wairoa\",\n  Horowhenua: \"Horowhenua\",\n  Manawatu: \"Manawatu\",\n  \"Palmerston North\": \"Palmerston North\",\n  Rangitikei: \"Rangitikei\",\n  Ruapehu: \"Ruapehu\",\n  Tararua: \"Tararua\",\n  Wanganui: \"Wanganui\",\n  Marlborough: \"Marlborough\",\n  Nelson: \"Nelson\",\n  Tasman: \"Tasman\",\n  \"Far North\": \"Far North\",\n  Kaipara: \"Kaipara\",\n  Whangarei: \"Whangarei\",\n  \"Central Otago\": \"Central Otago\",\n  Clutha: \"Clutha\",\n  Dunedin: \"Dunedin\",\n  \"Queenstown-Lakes\": \"Queenstown-Lakes\",\n  Waitaki: \"Waitaki\",\n  Gore: \"Gore\",\n  Invercargill: \"Invercargill\",\n  Southland: \"Southland\",\n  \"New Plymouth\": \"New Plymouth\",\n  \"South Taranaki\": \"South Taranaki\",\n  Stratford: \"Stratford\",\n  Franklin: \"Franklin\",\n  Waikato: \"Waikato\",\n  Waipa: \"Waipa\",\n  Waitomo: \"Waitomo\",\n  Carterton: \"Carterton\",\n  \"Hutt city\": \"Hutt city\",\n  \"Kapiti Coast\": \"Kapiti Coast\",\n  Masterton: \"Masterton\",\n  Porirua: \"Porirua\",\n  \"South Wairarapa\": \"South Wairarapa\",\n  \"Upper Hutt\": \"Upper Hutt\",\n  Wellington: \"Wellington\",\n  Buller: \"Buller\",\n  Grey: \"Grey\",\n  Westland: \"Westland\",\n  TT: \"New Zealand\",\n}\n*/\n\n// export const STATE_NAMES = {\n//   AP: 'Andhra Pradesh',\n//   AR: 'Arunachal Pradesh',\n//   AS: 'Assam',\n//   BR: 'Bihar',\n//   CT: 'Chhattisgarh',\n//   GA: 'Goa',\n//   GJ: 'Gujarat',\n//   HR: 'Haryana',\n//   HP: 'Himachal Pradesh',\n//   JH: 'Jharkhand',\n//   KA: 'Karnataka',\n//   KL: 'Kerala',\n//   MP: 'Madhya Pradesh',\n//   MH: 'Maharashtra',\n//   MN: 'Manipur',\n//   ML: 'Meghalaya',\n//   MZ: 'Mizoram',\n//   NL: 'Nagaland',\n//   OR: 'Odisha',\n//   PB: 'Punjab',\n//   RJ: 'Rajasthan',\n//   SK: 'Sikkim',\n//   TN: 'Tamil Nadu',\n//   TG: 'Telangana',\n//   TR: 'Tripura',\n//   UT: 'Uttarakhand',\n//   UP: 'Uttar Pradesh',\n//   WB: 'West Bengal',\n//   AN: 'Andaman and Nicobar Islands',\n//   CH: 'Chandigarh',\n//   DN: 'Dadra and Nagar Haveli and Daman and Diu',\n//   DL: 'Delhi',\n//   JK: 'Jammu and Kashmir',\n//   LA: 'Ladakh',\n//   LD: 'Lakshadweep',\n//   PY: 'Puducherry',\n//   TT: 'New Zealand',\n//   [UNASSIGNED_STATE_CODE]: 'Unassigned',\n// };\n\nconst cityCodes = [];\nconst cityCodesMap = {};\nObject.keys(CITY_NAMES).map((key, index) => {\n  cityCodesMap[CITY_NAMES[key]] = key;\n  cityCodes.push({code: key, name: CITY_NAMES[key]});\n  return null;\n});\nexport const CITY_CODES = cityCodesMap;\nexport const CITY_CODES_ARRAY = cityCodes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () =>\n      setTimeout(() => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      }, 3000)\n    );\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {isDevelopmentOrTest} from '../utils/commonFunctions';\n\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    keySeparator: false,\n    returnEmptyString: false,\n    fallbackLng: 'english',\n    load: 'languageOnly',\n    backend: {\n      loadPath: 'https://api.covid19india.org/locales/locale_{{lng}}.json',\n      addPath: 'http://localhost:9999/',\n    },\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// import './wdyr';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\n\nimport React, {Suspense, lazy} from 'react';\nimport {render} from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nconst App = lazy(() => import('./App'));\nconst rootElement = document.getElementById('root');\n\nconst main = () =>\n  render(\n    <Suspense fallback={<div />}>\n      <Router>\n        <App />\n      </Router>\n    </Suspense>,\n    rootElement\n  );\n\nconst browserSupportsAllFeatures = () => {\n  return window.requestIdleCallback && window.IntersectionObserver;\n};\n\nconst loadScript = (src, done) => {\n  const js = document.createElement('script');\n  js.src = src;\n  js.onload = function () {\n    done();\n  };\n  js.onerror = function () {\n    done(new Error('Failed to load script ' + src));\n  };\n  document.head.appendChild(js);\n};\n\nif (browserSupportsAllFeatures()) {\n  main();\n} else {\n  loadScript(\n    'https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=requestIdleCallback%2CIntersectionObserver',\n    main\n  );\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}
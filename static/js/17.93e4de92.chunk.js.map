{"version":3,"sources":["components/MiniNavbar.js","App.js"],"names":["MiniNavbar","showLanguageSwitcher","setShowLanguageSwitcher","useTranslation","i18n","currentLanguage","t","Object","keys","locales","includes","language","options","fallbackLng","useState","expand","setExpand","handleLanguageSwitcher","useCallback","useSpring","opacity","spring","set","stop","div","className","style","onClick","bind","this","to","Home","lazy","LanguageSwitcher","App","useDarkMode","location","useLocation","pages","pageLink","view","displayName","showInNavbar","useEffect","document","documentElement","scrollTo","top","behavior","body","fallback","map","page","index","exact","path","render","match","key"],"mappings":"qVAMe,SAASA,EAAT,GAGZ,IAAD,EAFEC,EAEF,EAFEA,qBACAC,EACF,EADEA,wBACF,EACoBC,cAAXC,EADT,EACSA,KAEDC,GAHR,EACeC,EAEWC,OAAOC,KAAKC,GAASC,SAArB,OAA8BN,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMO,UAApC,OAClBP,QADkB,IAClBA,OADkB,EAClBA,EAAMO,SADY,OAElBP,QAFkB,IAElBA,GAFkB,UAElBA,EAAMQ,eAFY,aAElB,EAAeC,YAAY,IALnC,EAO8BC,oBAAS,GAPvC,mBAOSC,EAPT,KAOiBC,EAPjB,KASQC,EAAyBC,uBAAY,WACnCH,GAAQC,GAAU,GACtBd,GAAyBD,KAC1B,CAACc,EAAQd,EAAsBe,EAAWd,IAZ/C,EAc8BiB,aAAU,iBAAO,CAACC,QAAS,MAdzD,mBAcSC,EAdT,KAciBC,EAdjB,KAcsBC,EAdtB,KAkBE,OAHAD,EAAI,CAACF,QAAS,IACdG,IAGI,6BACI,kBAAC,IAASC,IAAV,CAAcC,UAAU,SAASC,MAAOL,GACpC,yBAAKI,UAAU,cAAcE,QAASV,EAAuBW,KAAKC,OAC7DpB,EAAQJ,IAGb,yBAAKoB,UAAU,iBACX,kBAAC,IAAD,CAAMK,GAAG,IAAIH,QAASX,EAAUY,KAAKC,MAAM,IAA3C,cACW,wC,oBC5BzBE,EAAOC,gBAAK,kBAAM,uEAGlBC,GAFQD,gBAAK,kBAAM,wDACXA,gBAAK,kBAAM,6EACAA,gBAAK,kBAAM,mCA6ErBE,UAzEH,WACOC,aAAY,GAA7B,IADgB,EAEwCrB,oBAAS,GAFjD,mBAETb,EAFS,KAEaC,EAFb,KAGVkC,EAAWC,cAEXC,EAAQ,CACZ,CACEC,SAAU,IACVC,KAAMT,EACNU,YAAa,OACbC,cAAc,IAyBlB,OATAC,qBAAU,WACJ1C,IAEF2C,SAASC,gBAAgBC,SAAS,CAACC,IAAK,EAAGC,SAAU,WAErDJ,SAASK,KAAKH,SAAS,CAACC,IAAK,EAAGC,SAAU,cAE3C,CAAC/C,IAGF,yBAAKwB,UAAU,OAEb,kBAAC,WAAD,CAAUyB,SAAU,+BAClB,kBAACjB,EACK,CAAChC,uBAAsBC,6BAU/B,kBAACF,EACK,CAACC,uBAAsBC,4BAG7B,kBAAC,WAAD,CAAUgD,SAAU,+BAClB,kBAAC,IAAD,CAAQd,SAAUA,GACfE,EAAMa,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAMH,EAAKb,SACXiB,OAAQ,cAAEC,MAAF,OAAa,kBAACL,EAAKZ,KAAN,OACrBkB,IAAKL,OAIX,kBAAC,IAAD,CAAUvB,GAAG","file":"static/js/17.93e4de92.chunk.js","sourcesContent":["import React, {useCallback, useState, } from 'react';\nimport {Link} from 'react-router-dom';\nimport {useSpring, useTransition, animated} from 'react-spring';\nimport {useTranslation} from 'react-i18next';\nimport locales from '../i18n/locales.json';\n\nexport default function MiniNavbar({\n    showLanguageSwitcher,\n    setShowLanguageSwitcher,\n}){\n    const {i18n, t} = useTranslation();\n\n    const currentLanguage = Object.keys(locales).includes(i18n?.language)\n        ? i18n?.language\n        : i18n?.options?.fallbackLng[0];\n        \n    const [expand, setExpand] = useState(false);\n\n    const handleLanguageSwitcher = useCallback(() => {\n        if (expand) setExpand(false);\n        setShowLanguageSwitcher(!showLanguageSwitcher);\n    }, [expand, showLanguageSwitcher, setExpand, setShowLanguageSwitcher]);\n\n    const [spring, set, stop] = useSpring(() => ({opacity: 0}));\n    set({opacity: 1});\n    stop();\n\n    return(\n        <div>\n            <animated.div className=\"Navbar\" style={spring}>\n                <div className=\"navbar-left\" onClick={handleLanguageSwitcher.bind(this)}>\n                    {locales[currentLanguage]}\n                </div>\n\n                <div className=\"navbar-middle\">\n                    <Link to=\"/\" onClick={setExpand.bind(this, false)}>\n                    Covid19 in <span>NZ</span>\n                    </Link>\n                </div>\n            </animated.div>\n        </div>\n    )\n}","import './App.scss';\n// import Navbar from './components/Navbar';\nimport MiniNavbar from './components/MiniNavbar';\n\nimport React, {lazy, useState, Suspense, useEffect} from 'react';\nimport {Route, Redirect, Switch, useLocation} from 'react-router-dom';\nimport useDarkMode from 'use-dark-mode';\n\nconst Home = lazy(() => import('./components/Home'));\nconst About = lazy(() => import('./components/About'));\nconst State = lazy(() => import('./components/State'));\nconst LanguageSwitcher = lazy(() => import('./components/LanguageSwitcher'));\n\n// const GoogleAd = lazy(() => import ('./components/GoogleAd'));\n\nconst App = () => {\n  const darkMode = useDarkMode(true); // Default to true\n  const [showLanguageSwitcher, setShowLanguageSwitcher] = useState(false);\n  const location = useLocation();\n\n  const pages = [\n    {\n      pageLink: '/',\n      view: Home,\n      displayName: 'Home',\n      showInNavbar: true,\n    },\n    // {\n    //   pageLink: '/about',\n    //   view: About,\n    //   displayName: 'About',\n    //   showInNavbar: true,\n    // },\n    // {\n    //   pageLink: '/state/:stateCode',\n    //   view: State,\n    //   displayName: 'State',\n    //   showInNavbar: false,\n    // },\n  ];\n\n  useEffect(() => {\n    if (showLanguageSwitcher) {\n      // For Chrome, Firefox, IE and Opera\n      document.documentElement.scrollTo({top: 0, behavior: 'smooth'});\n      // For Safari\n      document.body.scrollTo({top: 0, behavior: 'smooth'});\n    }\n  }, [showLanguageSwitcher]);\n\n  return (\n    <div className=\"App\">\n\n      <Suspense fallback={<div />}>\n        <LanguageSwitcher\n          {...{showLanguageSwitcher, setShowLanguageSwitcher}}\n        />\n      </Suspense>\n\n      {/* <Navbar\n        pages={pages}\n        {...{darkMode}}\n        {...{showLanguageSwitcher, setShowLanguageSwitcher}}\n      /> */}\n\n      <MiniNavbar \n        {...{showLanguageSwitcher, setShowLanguageSwitcher}}\n      />\n\n      <Suspense fallback={<div />}>\n        <Switch location={location}>\n          {pages.map((page, index) => {\n            return (\n              <Route\n                exact\n                path={page.pageLink}\n                render={({match}) => <page.view />}\n                key={index}\n              />\n            );\n          })}\n          <Redirect to=\"/\" />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}